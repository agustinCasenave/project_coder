import express from 'express';
import { ProductManager } from "../classes/products.js"
import { CartManager } from "../classes/carts.js"
const productManager = new ProductManager("./data/products.json");
const cartManager = new CartManager("./data/carts.json");

const app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

/*----------------------------------------------------------------PRODUCTS----------------------------------------------------------------*/
app.get('/products', async (req, res) => {                 //Get ALL products
    try {
        const products = await productManager.getProducts()
        res.status(200).json(products);
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);
    }
    
})

app.get('/products/:pid', async (req, res) => {             //Get PId Product
    try {
        const { pid } = req.params
        console.log(pid);
        const product = await productManager.getProductById(pid)
        if(!product) res.status(404).json({msg: "Product not found"})
        else res.status(200).json(product)
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);
    }
})

app.post('/products', async (req, res) => {               //Create Product. Data on body. Id Autogenerated
    try {
        let title = req.body.title
        let description = req.body.description
        let price = req.body.price
        let thumbnails = req.body.thumbnails
        let code = req.body.code
        let stock = req.body.stock
        let status = req.body.status
        let category = req.body.category
        const product = await productManager.createProduct(title, description, code, price, status, stock, category, thumbnails )
        if (!product) res.status(404).json({ msg: "User already exists" });
        else res.status(200).json(product);
        /*Product data:
            {   
                id:
                title: 
                description:
                code: 
                price:
                status: 
                stock:
                category:
                thumbnail: []   //Array of thumbnail paths
            }    
        */
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);
    }
})

app.put('/products/:pid', async (req, res) => {            //Update Product. Data on body. Id unchanged.
    try {
        const { pid } = req.params;
        const response = await productManager.updateProduct(pid, req.body);
        if (!response) res.status(404).json({ msg: "Product not found" });
        else res.status(200).json({"msg": "Product updated successfully"});
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);        
    }
})

app.delete('/products/:pid', async (req, res) => {          //Delete Product. 
    try {
        const { pid } = req.params;
        const response = await productManager.deleteProduct(pid);
        if (!response) res.status(404).json({ msg: "Product not found" });
        else res.status(200).json({"msg": "Product deleted successfully"});
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);        
    }
})

/*----------------------------------------------------------------CARTS----------------------------------------------------------------*/
app.post('/carts', async (req,res) => {                     //Create Cart. Data on body. Id Autogenerated.
    try {
        const cart = await cartManager.createCart();
        if(!cart) res.status(404).json({"msg": "Cart not created"});
        else res.status(200).json(cart);
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);           
    }
})

app.get('/carts/:cid', async (req, res) => {                 //Get Products on cart CId.
    try {
        const { cid } = req.params
        const cart = await cartManager.getCartById(cid)
        if(!cart) res.status(404).json({msg: "Cart not found"})
        else {
            res.status(200).json(cart.products)
        }
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);   
    }
})

app.post('/carts/:cid/product/:pid', async (req, res) => {  //Add Product PId to cart CId. 
    try {
        const { cid } = req.params
        const { pid } = req.params
        const cart = await cartManager.addProductToCart(cid, pid);
        if (!cart) res.status(404).json({"msg": "Cart not found"});
        else res.status(200).json(cart);
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);   
    }
    /*Cart data:
        {
            id:
            products: Array de Products
        }
    */
    /*Product in cart format:
        {
            product: productId
            quantity: (add 1 every time method is called)
        }
    */
})

const PORT = 8080;
app.listen(PORT, ()=>console.log(`Server ok on port ${PORT}`))